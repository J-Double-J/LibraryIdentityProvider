// <auto-generated />
using System;
using LibraryIdentityProvider.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LibraryIdentityProvider.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231011030045_RecreatePostgresDB")]
    partial class RecreatePostgresDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LibraryIdentityProvider.Entities.Password", b =>
                {
                    b.Property<int>("PasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PasswordID"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("PasswordID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Password", (string)null);
                });

            modelBuilder.Entity("LibraryIdentityProvider.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.RolePermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.HasKey("PermissionID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.RoleUser", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserAccountID")
                        .HasColumnType("uuid");

                    b.HasKey("RoleID", "UserAccountID");

                    b.HasIndex("UserAccountID");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("LibraryIdentityProvider.Entities.Password", b =>
                {
                    b.HasOne("LibraryIdentityProvider.Entities.UserAccount", null)
                        .WithOne()
                        .HasForeignKey("LibraryIdentityProvider.Entities.Password", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.RolePermission", b =>
                {
                    b.HasOne("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIdentityProvider.Features.UserManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryIdentityProvider.Features.UserManagement.Roles_and_Permissions.RoleUser", b =>
                {
                    b.HasOne("LibraryIdentityProvider.Features.UserManagement.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryIdentityProvider.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserAccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
